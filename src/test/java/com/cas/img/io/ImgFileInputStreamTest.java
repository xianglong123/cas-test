package com.cas.img.io;

import com.cas.des.des3_ecb.HexConverter;
import org.junit.Test;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.Arrays;

/**
 * @author xiang_long
 * @version 1.0
 * @date 2022/3/30 6:43 下午
 * @desc
 */
public class ImgFileInputStreamTest {


    @Test
    public void test1() {
        String path = "/Users/xianglong/IdeaProjects/cas-test/src/test/java/com/cas/img/io/img3.jpg";
        File file = new File(path);
        // 自动关闭流
        try (FileInputStream fis = new FileInputStream(file);) {
            //从代码形式看，使用read(byte[] b)较为直观和简便，因此项目中可以此方法为主进行数据读取
            int n = 0;
            // 通过文件长度指定字节长度
            byte[] b = new byte[(int) file.length()];
            while (n != -1) {
                // 这里的read(byte []) 会读取指定长度的字节，并赋值给输入的字节数组，并返回读取长度
                n = fis.read(b);
            }
            String hexString
            System.out.println("最终结果： " + hexString);
            udpate(HexConverter.hexString2ByteArray(hexString));
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    public static void udpate(byte[] data) {
        String path2 = "/Users/xianglong/IdeaProjects/cas-test/src/test/java/com/cas/img/io/3.jpg";
        File file = new File(path2);
        try {
            if (!file.exists()) {
                file.createNewFile();
            }
        } catch (IOException e) {
            e.printStackTrace();
        }

        try {
            FileOutputStream fos = new FileOutputStream(file);
            fos.write(data);
            fos.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }


}
