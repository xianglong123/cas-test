package com.cas.encryption.sm4;

import cn.hutool.core.util.CharsetUtil;
import cn.hutool.core.util.HexUtil;
import cn.hutool.crypto.SecureUtil;
import cn.hutool.crypto.SmUtil;
import cn.hutool.crypto.asymmetric.Sign;
import cn.hutool.crypto.asymmetric.SignAlgorithm;
import cn.hutool.crypto.digest.HMac;
import cn.hutool.crypto.digest.HmacAlgorithm;
import cn.hutool.crypto.symmetric.SymmetricCrypto;
import com.cas.BaseTest;
import com.cas.util.HexConverter;
import org.apache.commons.codec.DecoderException;
import org.apache.commons.codec.binary.Hex;
import org.bouncycastle.crypto.CipherParameters;
import org.bouncycastle.crypto.Mac;
import org.bouncycastle.crypto.engines.SM4Engine;
import org.bouncycastle.crypto.macs.CBCBlockCipherMac;
import org.bouncycastle.crypto.params.KeyParameter;
import org.bouncycastle.crypto.params.ParametersWithIV;
import org.bouncycastle.jcajce.provider.asymmetric.ec.GMCipherSpi;
import org.bouncycastle.jce.provider.BouncyCastleProvider;
import org.junit.Test;

import javax.crypto.BadPaddingException;
import javax.crypto.Cipher;
import javax.crypto.IllegalBlockSizeException;
import javax.crypto.NoSuchPaddingException;
import javax.crypto.spec.SecretKeySpec;
import java.security.*;

/**
 * @author xiang_long
 * @version 1.0
 * @date 2021/9/7 3:44 下午
 * @desc 对称加密SM4
 */
public class HutoolSm4Test extends BaseTest {

    static {
        Security.addProvider(new BouncyCastleProvider());
    }

    @Test
    public void test6() {
        String key = "MIIBqzCCARQCCQDaTgL0O8c2BTANBgkqhkiG9w0BAQsFADAaMQswCQYDVQQGEwJj\n" +
                "bjELMAkGA1UECAwCY20wHhcNMjIwMTE5MDI1NTUwWhcNMjMwMTE5MDI1NTUwWjAa\n" +
                "MQswCQYDVQQGEwJjbjELMAkGA1UECAwCY20wgZ8wDQYJKoZIhvcNAQEBBQADgY0A\n" +
                "MIGJAoGBAN4ca2cZcJqMU8Mc/9x1ENDZbhgKrecLU5Z4nLTbvzBdZuRNRlLod9Il\n" +
                "PzmDlhv7AtYt6kG0HmEj1ElYQBfK61zaQhMCCt0iJrZwglh5KqHYGq1rFjp2678i\n" +
                "o7tlHTJYu45oCfa3nus3/1Ton3LbrA6MJhbOpnvNd30/CUWhRGa5AgMBAAEwDQYJ\n" +
                "KoZIhvcNAQELBQADgYEAWBOm3XD+Dl/tKNF1K2T3Yh/N9qof8wm8eQAVhhZgotxv\n" +
                "VmWngigR3aT4ocaxywIPEi2/zoROIAV10fiMc/9IlY//gIL9OU84DrkKUjivU8gs\n" +
                "PVlsy6dnidQ3SK89IhOgQiakw15yGP9+TQ1oTtB+PCM1ib53Ac7eWsnaDZH8j1o=";

        System.out.println(HexConverter.byteArray2HexString(key.getBytes()));
    }

    @Test
    public void test5() {
        String random = "32323232323232323232323232323232";
        String key
        String data = random + key;
        String privateKey = "ECA65A95757D3C97ACBBBD4034DFE8B0EEB9819A9F3A77EA0CB9DB870C55E38E";
        Sign sign = SecureUtil.sign(SignAlgorithm.MD5withRSA);


    }

    @Test
    public void test4() {
        String testStr = "test中文";

        // 此处密钥如果有非ASCII字符，考虑编码
        byte[] key = "password".getBytes();
        HMac mac = new HMac(HmacAlgorithm.HmacMD5, key);

        // b977f4b13f93f549e06140971bded384
        String macHex1 = mac.digestHex(testStr);
        System.out.println(macHex1);

        boolean verify = mac.verify(HexUtil.decodeHex(macHex1), HexUtil.decodeHex("b977f4b13f93f549e06140971bded384"));
        System.out.println(verify);
    }

    @Test
    public void test3() {
        String data
        String iv = "00000000000000000000000000000000";
        byte[] key = HexUtil.decodeHex("E0E1E2E3E4E5E6E7E8E9EAEBECEDEEEF");
        SM4Engine engine = new SM4Engine();
        Mac mac = new CBCBlockCipherMac(engine, engine.getBlockSize() * 8, null);
        CipherParameters cipherParameters = new KeyParameter(key);
        mac.init(new ParametersWithIV(cipherParameters, HexUtil.decodeHex(iv)));
        mac.update(HexUtil.decodeHex(data), 0, data.length());
        byte[] result = new byte[mac.getMacSize()];
        mac.doFinal(result, 0);
        System.out.println(HexUtil.encodeHexStr(result));
    }

    @Test
    public void test2() throws NoSuchPaddingException, NoSuchAlgorithmException, NoSuchProviderException, InvalidKeyException, BadPaddingException, IllegalBlockSizeException {

        Cipher cipher = Cipher.getInstance("SM4/ECB/NoPadding", BouncyCastleProvider.PROVIDER_NAME);
        Key sm4Key = new SecretKeySpec(HexUtil.decodeHex("03030303030303030303030303030303"), "SM4");
        cipher.init(Cipher.DECRYPT_MODE, sm4Key);
        byte[] bytes = cipher.doFinal(HexUtil.decodeHex
        System.out.println(HexUtil.encodeHexStr(bytes));
        // 6D7620BDFC47FEE1EC523393339CE8D3
        // 6d7620bdfc47fee1ec523393339ce8d3

    }

    @Test
    public void test() {
        String content = "oeW3w4t4tUNBsAhgL1_Sdw7s2Hjc";
        SymmetricCrypto sm4 = SmUtil.sm4(HexUtil.decodeHex("0e00bca58b4b9243e0550dd9d22ff785"));
//        String encryptHex = sm4.encryptHex(content);
        String decryptStr = sm4.decryptStr(content, CharsetUtil.CHARSET_UTF_8);
//        System.out.println("加密结果： " + encryptHex);
        System.out.println("解密结果： " + decryptStr);
    }


}
