//
// Source code recreated from a .class file by IntelliJ IDEA
// (powered by Fernflower decompiler)
//

package com.cas.des.des3_ecb;

import org.apache.commons.codec.DecoderException;
import org.apache.commons.codec.binary.Hex;
import org.apache.commons.lang3.StringUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.io.UnsupportedEncodingException;
import java.nio.charset.StandardCharsets;
import java.util.Objects;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class HexConverter {
    private static final Logger logger = LoggerFactory.getLogger(HexConverter.class);
    private static final char[] HEX_CHARS = new char[]{'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F'};

    public HexConverter() {
    }

    public static String encode(byte[] src) {
        return Hex.encodeHexString(src);
    }

    public static byte int2Byte(int i) {
        return int2ByteArray(i, 1)[0];
    }

    public static byte[] int2ByteArray(int i, int byteCount) {
        if (byteCount >= 1 && byteCount <= 4) {
            long maxValue = (long) Math.pow(2.0D, (double) (8 * byteCount)) - 1L;
            if (i >= 0 && (long) i <= maxValue) {
                String hexString = int2HexString(i, byteCount * 2);
                return hexString2ByteArray(hexString);
            } else {
                return null;
            }
        } else {
            return null;
        }
    }

    public static byte[] decode(String data) {
        return ByteUtil.hexStringToBytes(data);
    }

    public static void validate(String src) {
        if (null == src) {
            throw new IllegalArgumentException("src is null");
        } else if (0 != src.length() % 2) {
            logger.error("错误的源数据：" + src);
            throw new IllegalArgumentException("src length is odd");
        } else {
            for (int i = 0; i < src.length(); ++i) {
                if (!isHexChar(src.charAt(i))) {
                    logger.error("错误的源数据：" + src);
                    throw new IllegalArgumentException("illegal char " + src.charAt(i) + " at " + 1);
                }
            }

        }
    }

    public static boolean isHexChar(char hexChar) {
        hexChar = Character.toUpperCase(hexChar);
        char[] var1 = HEX_CHARS;
        int var2 = var1.length;

        for (int var3 = 0; var3 < var2; ++var3) {
            char c = var1[var3];
            if (c == hexChar) {
                return true;
            }
        }

        return false;
    }

    public static boolean isHexString(String hexString) {
        String strExp = "^[a-fA-F0-9]+$";
        Pattern pattern = Pattern.compile(strExp);
        Matcher matcher = pattern.matcher(hexString);
        return matcher.matches();
    }

    public static String toHexString(int i) {
        return toHexString(i, 1);
    }

    public static String toHexString(int i, int byteCount) {
        if (byteCount >= 1 && byteCount <= 4) {
            int maxValue = (int) Math.pow(2.0D, (double) (8 * byteCount)) - 1;
            if (i >= 0 && i <= maxValue) {
                String hex = Integer.toHexString(i);
                if (0 != hex.length() % 2) {
                    hex = "0" + hex;
                }

                int targetLength = byteCount * 2;
                int paddingLength = targetLength - hex.length();
                StringBuffer sb = new StringBuffer();

                for (int loop = 0; loop < paddingLength; ++loop) {
                    sb.append('0');
                }

                return sb.append(hex).toString();
            } else {
                return null;
            }
        } else {
            return null;
        }
    }

    public static byte decodeToByte(String hex) {
        validate(hex);
        if (2 != hex.length()) {
            return 'a';
        } else {
            return decode(hex)[0];
        }
    }

    public static String encode(byte src) {
        return encode(new byte[]{src});
    }

    public static String byte2HexString(byte src) {
        return byteArray2HexString(new byte[]{src});
    }

    public static int byte2Int(byte src) {
        return hexString2Int(byte2HexString(src));
    }

    public static int byteArray2Int(byte[] src) {
        String hexString = byteArray2HexString(src);
        return hexString2Int(hexString);
    }

    public static String byteArray2HexString(byte[] src) {
        return null == src ? null : Hex.encodeHexString(src).toUpperCase();
    }

    public static byte hexString2Byte(String hex) {
        validate(hex);
        if (2 != hex.length()) {
            return '0';
        } else {
            return hexString2ByteArray(hex)[0];
        }
    }

    public static byte[] hexString2ByteArray(String data) {
        if (StringUtils.isEmpty(data)) {
            return new byte[0];
        } else {
            validate(data);
            if (0 != data.length() % 2) {
                return null;
            } else {
                return ByteUtil.hexStringToBytes(data);
            }
        }
    }

    public static String int2HexString(int i) {
        return int2HexString(i, 2);
    }

    public static String int2HexString(int i, int stringLength) {
        if (stringLength >= 1 && stringLength <= 8 && 0 == stringLength % 2) {
            long maxValue = (long) Math.pow(16.0D, (double) stringLength) - 1L;
            if (i >= 0 && (long) i <= maxValue) {
                String hex = int2HexStingWithNecessaryEvenLength(i);
                StringBuffer sb = new StringBuffer();

                for (int loop = hex.length(); loop < stringLength; ++loop) {
                    sb.append('0');
                }

                return sb.append(hex).toString().toUpperCase();
            } else {
                return null;
            }
        } else {
            return null;
        }
    }

    public static String int2HexStingWithNecessaryEvenLength(int i) {
        return long2HexStingWithNecessaryEvenLength((long) i);
    }

    public static String long2HexString(long l, int stringLength) {
        if (stringLength >= 1 && stringLength <= 16 && 0 == stringLength % 2) {
            long maxValue = (long) Math.pow(16.0D, (double) stringLength) - 1L;
            if (l >= 0L && l <= maxValue) {
                String hex = long2HexStingWithNecessaryEvenLength(l);
                StringBuffer sb = new StringBuffer();

                for (int loop = hex.length(); loop < stringLength; ++loop) {
                    sb.append('0');
                }

                return sb.append(hex).toString().toUpperCase();
            } else {
                return null;
            }
        } else {
            return null;
        }
    }

    public static String long2HexStingWithNecessaryEvenLength(long l) {
        String hex = Long.toHexString(l);
        if (0 != hex.length() % 2) {
            hex = "0" + hex;
        }

        return hex;
    }

    public static int hexString2Int(String src) {
        validate(src);
        if (8 < src.length()) {
            return 0;
        } else {
            if (8 == src.length()) {
                char c = src.charAt(0);
                int i = hexString2Int("0" + c);
                if (8 <= i) {
                    return 0;
                }
            }

            return Integer.parseInt(src, 16);
        }
    }

    public static String hexEncode(byte[] input) {
        return Hex.encodeHexString(input);
    }

    public static byte[] hexDecode(String input) {
        try {
            return Hex.decodeHex(input.toCharArray());
        } catch (DecoderException var2) {
            throw new IllegalStateException("Hex Decoder exception", var2);
        }
    }


    /**
     * #13045F204E09
     * #1424003100310030003200320034003100390039003200300033003200350032003800310035
     * #152A0032003000310038002E00300035002E00300032002D0032003000320038002E00300035002E00300032
     * #1882019c
     * #1982012C308201283081D0A003020102021001008631310010866000000000000100300A06082A811CCF55018375302E310B300906035504061302434E310E300C060355040A0C05484E434143310F300D06035504030C06524F4F544341301E170D3230313231383130323233375A170D3330313231383037313535355A30003059301306072A8648CE3D020106082A811CCF5501822D034200047F61538BB0C8190AF97A35AA6CC072D3A10B958BE8B25750C7F8A5F68A806DC14EAE57E23017AD7B8304A84A452AF81101C9C39263571FC5E3AC41E791E931F5300A06082A811CCF5501837503470030440220584586BE3C4943CC9D453858970DF62EDE4C8EAF647AE7F5D96CF4F47D8DD115022033DD3D62AB274B944231DAAA99E1115F37A9D7721601A1462604FBD93018B3CF
     * #1A20A8B816183A48297FBE8EED4524B74B39ED313B78C93CB4E63CE427424BFAAE69

     * <p>
     * _ N
     * 1 1 0 2 2 4 1 9 9 2 0 3 2 5 2 8 1 5
     * 2 0 1 8 . 0 5 . 0 2 - 2 0 2 8 . 0 5 . 0 2
     *
     * @param args
     * @throws UnsupportedEncodingException
     */
    public static void main(String[] args) throws UnsupportedEncodingException {
        String val[] = {
                "820A1A",
                "5F204E09",
                "003100310030003200320034003100390039003200300033003200350032003800310035",
                "0032003000310038002E00300035002E00300032002D0032003000320038002E00300035002E00300032",


                "3082012A3081D0A003020102021001008631310010866000000000000200300A06082A811CCF55018375302E310B300906035504061302434E310E300C060355040A0C05484E434143310F300D06035504030C06524F4F544341301E170D3230313231383130323235365A170D3330313231383037313535355A30003059301306072A8648CE3D020106082A811CCF5501822D03420004A9721CB8C91EE248B60CC7C912B403A97903487DE0464F4F9FE797B33F83C732495F815DA6060F1B6A73705ACC37FBF00DC6F103DC81C4ABDC729CB7D4B89034300A06082A811CCF55018375034900304602210089C7758D7D3CBD0F0703D14A42B9A91BC783660915CE2BF30D6D429CD4FB6DA9022100BD72E92B15B0060F2B84950CA153C958132769D5734EE9A1E5B069A1F070764F",
                "A8B816183A48297FBE8EED4524B74B39ED313B78C93CB4E63CE427424BFAAE69",


        };

        String enc[] = {"张三","V3|5672141563146|带RSA 加密的SHA-512 ( 1.2.840.113549.1.1.13)|无|中国|中华人民共和国公安部|中华人民共和国公安部证书管理中心|公安部CA中心|21/09/1993 9:33:18 AM|09/11/2027 5:22:23 PM|| RSA加密(1.2.840.113549.1.1.1)|无|216字节 4D4947664D413047435371475349623344514542415155414134474E4144434269514B42675143552B4242796347634D4461735942724C4836465A6C544B4A465373314736785838384B52575A417765704E7A344D4F4551745A4F4562645154756E39394161626A4F4E3270754F39576233347358455A33327A505A554C674C3941622B5054716A616E796F5A6D6446343445306150786F2F6F687962753273367653713333785633524E2F434E3337764566355359386836306A3348327172656E6833662B304E6250794A376471744777494441514142|密钥使用( 2.5.29.15)|关键 是|用途 数字签名, 密钥证书签名, CRL签名|基本约束 ( 2.5.29.19 )|关键 是|证书颁发机构 是|主题密钥标识符( 2.5.29.14 )|关键 否|密钥ID:31 EA 76 A9 23 74 A5 DF D4 FD EE A0 C1 A6 9E C6 11 0E 11 EC |授权密钥标识符 ( 2.5.29.35 )|关键 否|2B D0 69 47 94 76 09 FE F4 6B 8D 2E 40 A6 F7 47 4D 7F 08 5E"};


        for (String va : val) {
            System.out.println(decode2(va) + "\n");
        }

        for (String va: enc) {
            System.out.println(encode2(va));
        }

    }

    private static String encode2(String val) throws UnsupportedEncodingException {
        return byteArray2HexString(val.getBytes(StandardCharsets.UTF_16BE));
    }


    private static String decode2(String val) {
        return new String(Objects.requireNonNull(hexString2ByteArray(val)), StandardCharsets.UTF_16BE);
    }

}
