package com.cas.binary;

import cn.hutool.core.util.RandomUtil;
import com.alibaba.fastjson.JSONObject;
import com.cas.des.DesEncTest;
import com.cas.io.byteIO.I.User;
import com.cas.util.HexConverter;
import org.apache.commons.codec.digest.DigestUtils;
import org.bouncycastle.util.encoders.Hex;
import org.junit.After;
import org.junit.Before;
import org.junit.Test;

import java.io.UnsupportedEncodingException;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.time.temporal.ChronoUnit;
import java.util.*;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.CopyOnWriteArrayList;
import java.util.function.Function;
import java.util.function.Predicate;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import java.util.stream.Collectors;


/**
 * @author: xianglong[1391086179@qq.com]
 * @date: 上午9:39 2021/5/22
 * @version: V1.0
 * @review: 二进制操作测试
 */
public class BinaryTest {

    /**
     * 进行异或运行
     */
    @Test
    public void test11() {
        String[] data = {"a", "b", "c", "d", "e", "f", "g", "1", "2", "3", "4", "5", "6", "7"};
        int n = 15;
        Map<String, String> map = new HashMap<>();
        for (String str : data) {
            map.put(str, str);
            int h = str.hashCode();
            // 显示二进制计算规则
            int hash = h ^ (h >>> 16);
            System.out.println(String.format("h:[%s] === h>>>16:[%s] === hash:[%s] === 摸:[%s] === index:[%s]",
                    Integer.toBinaryString(h), Integer.toBinaryString(h >>> 16), Integer.toBinaryString(hash), Integer.toBinaryString(n), Integer.toBinaryString(n & hash)));
        }
    }

    @Test
    public void test10() {
        LocalDate today = LocalDate.now();
        LocalDate nextWeek = today.minus(1, ChronoUnit.WEEKS);
        System.out.println(nextWeek.format(DateTimeFormatter.ofPattern("yyyyMMdd")));
        String name = today.format(DateTimeFormatter.ofPattern("yyyyMMdd")) + "-" + today.minus(1, ChronoUnit.WEEKS).format(DateTimeFormatter.ofPattern("yyyyMMdd"));
        System.out.println(name);
    }

    @Test
    public void test9() {
        byte level = (byte) (Integer.valueOf("03").intValue() & 0x0F);
        System.out.println(Arrays.toString("00000000".getBytes()));
    }

    @Test
    public void test() {
        int i = 1;
        System.out.println(i >> 2); // i 的幂数 - 1
        System.out.println(i << 2); // i 的幂数 + 1
    }


    /**
     * 16进制转2进制，2进制做加法运算
     */
    @Test
    public void test2() {
        String str = "04";
        String res = "02";
        Integer num = Integer.parseInt(str, 16);
        Integer num2 = Integer.parseInt(res, 16);
        System.out.println(Integer.toBinaryString(num));
        System.out.println(Integer.toBinaryString(num2));
        System.out.println(Integer.toBinaryString(num + num2));
    }

    @Test
    public void test3() {
        String str = "TSMR00000";
        System.out.println(str.startsWith("TSMR"));
    }

    /**
     * 测试System.arraycopy能力
     *
     * @throws Exception
     */
    @Test
    public void test4() throws Exception {
        String seid = "2100000E103003528819";
        byte[] bytes = seid.getBytes();
        byte[] q4 = new byte[16];
        System.arraycopy(bytes, 0, q4, 0, 8);
        System.arraycopy(bytes, bytes.length - 8, q4, 8, 8);
        String decrypt = DesEncTest.encrypt("101112131415161718191A1B1C1D1E1F", Arrays.toString(q4));
        System.out.println(decrypt);
    }

    /**
     * 测试java.nio.ByteBuffer中getChar的计算过程
     * 结论：取两个字节，计算公式：count = 255 * index1 + （index1 + index2)
     */
    @Test
    public void test5() {
//        String data = "2100000E103003528819";
//        byte[] payload = data.getBytes();
        ByteBuffer buffer = ByteBuffer.wrap(new byte[16]);
        buffer.put((byte) 3);
        buffer.put((byte) 42);//296 = 255 + 41
        buffer.flip(); // count = 255 * index1 + index2
        System.out.println((int) buffer.getChar());
        // getChar的计算过程
        // 3:42 = 810 = 255 * 3 + 42 + 3 = 765 + 45 = 810
    }


    /**
     * 研究string和byte的转换关系
     * 16进制字符串其实就是ASCii码对应16进制的表示的字符表示，16进制字符串转换成byte[]数组，是每两个字符转换成十进制数据
     * 比如：101282 = [16,18,-128]
     * -128是因为7F是127， 80是-128， 81是-127
     */
    @Test
    public void test6() {
        String data
        System.out.println(Arrays.toString(Hex.decode("10"))); //Hex.decode()就是16进制转成10进制
        // [16,18,-128,1,40]
    }

    /**
     * Hex.decode是【16进制 -> 10进制】
     * Hex.encode是【10进制 -> 16进制】
     */
    @Test
    public void test7() {
        String data = "500237199907147872";
        System.out.println(new String(Hex.decode(Hex.encode("10".getBytes()))));
        System.out.println(Arrays.toString(Hex.encode(data.getBytes())));
    }


    @Test
    public void test8() {
        List<String> list = new ArrayList<>();
        list.add("a");
        System.out.println(list.get(1));
    }

    @Test
    public void test91() {
//        System.out.println(RandomUtil.randomNumbers(32));
        String x = RandomUtil.randomString(16);
        System.out.println(HexConverter.byteArray2HexString(x.getBytes()));
    }

    @Test
    public void test12() {
        String string = RandomUtil.randomString(6);
        System.out.println(string.toUpperCase());
    }


    @Test
    public void test13() {
        String data = "1391086179xl1638586081442440049";
        String string = DigestUtils.sha1Hex(data);
        System.out.println(string);
    }


    @Test
    public void test14() {
        // \. 匹配任意字符 \?
        String[] data = {"file.exe***888", "a.png", "b.jpg", "c.bas"};
        String strExp = "(?=\\.hello|\\.exe|\\.png|\\.jpg2)";
        Pattern pattern = Pattern.compile(strExp);
        Arrays.stream(data).forEach((a) -> {
            Matcher matcher = pattern.matcher(a);
            System.out.println(String.format("%s 是否匹配上  %s", a, matcher.find()));
        });
    }


    /**
     * anyMatch 任意一个满足为true， 全部不满足为false
     * allMatch 判断条件里的元素，所有的都是，返回true
     * noneMatch 与allMatch相反，判断条件里的元素，所有的都不是，返回true
     * count 类似list.size()
     */
    @Test
    public void test15() {
        List<User> users = Arrays.asList(new User("xl", "24"), new User("xl", "25"), new User("xl", "26"), new User("xl", "27"));
        boolean anyMatch = users.stream().anyMatch(user -> Integer.parseInt(user.getAge()) < 24);
        boolean allMatch = users.stream().allMatch(user -> Integer.parseInt(user.getAge()) < 24);
        boolean noneMatch = users.stream().noneMatch(user -> Integer.parseInt(user.getAge()) < 24);
        long count = users.stream().count();
        System.out.println(anyMatch);
        System.out.println(allMatch);
        System.out.println(noneMatch);
        System.out.println(count);
    }

    /**
     * distinct 比较通过equal 和 hashcode
     */
    @Test
    public void test16() {
        List<User> users = Arrays.asList(new User("xl", "24"), new User("xl", "24"), new User("xl", "26"), new User("xl", "27"));
        long count = users.stream().distinct().count();
        System.out.println(count);
    }

    /**
     * 利用filter通过单一字段去重
     * 例如：将name重复的去掉
     */
    @Test
    public void test17() {
        ArrayList<User> list = getUsers();
        list.stream().filter(distinctByKey(User::getName))
                .forEach(b -> System.out.println(b.getName()+ "," + b.getAge()));
    }

    private ArrayList<User> getUsers() {
        ArrayList<User> list = new ArrayList<>();
        {
            list.add(new User("xl", "18"));
            list.add(new User("xl", "19"));
            list.add(new User("tt", "17"));
            list.add(new User("ttz", "18"));
            list.add(new User("ttzz", "20"));
        }
        return list;
    }

    private static <T> Predicate<T> distinctByKey(Function<? super T, ?> keyExtractor) {
        Map<Object, Boolean> seen = new ConcurrentHashMap<>();
        return t -> seen.putIfAbsent(keyExtractor.apply(t), Boolean.TRUE) == null;
    }

    /**
     * 如果所指定的 key 已经在 HashMap 中存在，返回和这个 key 值对应的 value, 如果所指定的 key 不在 HashMap 中存在，则返回 null。
     * 注意：如果指定 key 之前已经和一个 null 值相关联了 ，则该方法也返回 null。
     */
    @Test
    public void test18() {
        Map<Object, Boolean> seen = new ConcurrentHashMap<>();
        Boolean a = seen.putIfAbsent("a", Boolean.TRUE);
        Boolean b = seen.putIfAbsent("a", Boolean.TRUE);
        System.out.println(a);
        System.out.println(b);
    }

    /**
     * java 1.8 stream
     */
    @Test
    public void test19() {
        /**
         * 过滤
         */
        ArrayList<User> users = getUsers();
        List<User> collect = users.stream().filter(a -> "xl".equals(a.getName())).collect(Collectors.toList());
        collect.forEach(System.out::println);

        /**
         * 排序
         */
        List<User> collect1 = users.stream().sorted(Comparator.comparingInt(s -> Integer.parseInt(s.getAge()))).collect(Collectors.toList());
        collect1.forEach(System.out::println);

    }

    /**
     * 获取证书公钥
     * 0004 + 64字节
     */
    @Test
    public void test20() {
        String data
        int i = data.indexOf("0004");
        String substring = data.substring(i + 4, i + 4 + 128);
        System.out.println(i);
        System.out.println(substring);

    }

    @Test
    public void test21() {
        String data = "1";
        System.out.println(data.getBytes());
    }


    /**
     * 查看源码
     */
    @Test
    public void test22() {
        List<String> list = new ArrayList<>();
        list.add("a");
        list.add("b");
        list.add("c");
        list.add("d");
        list.add("e");
        list.add("f");
        list.add("g");
        list.add("d");
        list.add("i");
        list.add("j");
        list.add("k");
        System.out.println(list.get(2));
        list.remove(2);
        System.out.println(list.get(2));
    }

    /**
     * 查看源码
     */
    @Test
    public void test23() {
        List<String> list = new LinkedList<>();
        list.add("a");
        list.add("b");
        list.add("c");
        list.add("d");
        list.add("e");
        list.add("f");
        list.add("g");
        list.add("d");
        list.add("i");
        list.add("j");
        list.add("k");
        System.out.println(list.get(2));
        list.remove(2);
        System.out.println(list.get(2));
    }

    /**
     * 写操作在一个复制的数组上进行，读操作还是在原始数组中进行，读写分离，互不影响。
     */
    @Test
    public void test24() {
        List<String> list = new CopyOnWriteArrayList<>();
        list.add("a");
        list.add("b");
        list.add("c");
        list.add("d");
        list.get(0);

    }

    @Test
    public void test25() {
        byte[] bytes = "xianglong2123456".getBytes();
        System.out.println(HexConverter.byteArray2HexString(bytes));
    }


    @Test
    public void test26() throws UnsupportedEncodingException {
        String data = "/9j/4AAQSkZJRgABAgAAAQABAAD/2wBDAAgGBgcGBQgHBwcJCQgKDBQNDAsLDBkSEw8UHRofHh0aHBwgJC4nICIsIxwcKDcpLDAxNDQ0Hyc5PTgyPC4zNDL/2wBDAQkJCQwLDBgNDRgyIRwhMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjL/wAARCAB2AGADASIAAhEBAxEB/8QAHwAAAQUBAQEBAQEAAAAAAAAAAAECAwQFBgcICQoL/8QAtRAAAgEDAwIEAwUFBAQAAAF9AQIDAAQRBRIhMUEGE1FhByJxFDKBkaEII0KxwRVS0fAkM2JyggkKFhcYGRolJicoKSo0NTY3ODk6Q0RFRkdISUpTVFVWV1hZWmNkZWZnaGlqc3R1dnd4eXqDhIWGh4iJipKTlJWWl5iZmqKjpKWmp6ipqrKztLW2t7i5usLDxMXGx8jJytLT1NXW19jZ2uHi4+Tl5ufo6erx8vP09fb3+Pn6/8QAHwEAAwEBAQEBAQEBAQAAAAAAAAECAwQFBgcICQoL/8QAtREAAgECBAQDBAcFBAQAAQJ3AAECAxEEBSExBhJBUQdhcRMiMoEIFEKRobHBCSMzUvAVYnLRChYkNOEl8RcYGRomJygpKjU2Nzg5OkNERUZHSElKU1RVVldYWVpjZGVmZ2hpanN0dXZ3eHl6goOEhYaHiImKkpOUlZaXmJmaoqOkpaanqKmqsrO0tba3uLm6wsPExcbHyMnK0tPU1dbX2Nna4uPk5ebn6Onq8vP09fb3+Pn6/9oADAMBAAIRAxEAPwD16QFyzlyx2g4zke+ff2FHmMuQVyRyWU5+h/z0pXibYHKiKNjjavXBpyr5YUvjb0PYH05rQsjRi6+Wqk4JZfTrnr/k0+Uxxo0rhRGB8zOMKKHZjBvBRYYc/MTgY7n/APXXh/xH+JRvHk0vSZnNqDiWbJHmH29qCWztdX+KGh6ZL9mgV78oT8yHbGPb3rz/AFf4t6zeSN9mkSyjLfcg6492PJryufU55CRvyKrCSYnd8x/Ci6RKueo2XxS8TWU5k+0pcxsRmOeMEAexHSvR/DHxftNduUtdQh+wXDDbvDZjP4npXza91KUARGGO/NT2d6QxWRtp7UOSYNM+04X+0KzLOCjLnK4I9qeiygjDgnILA9CTXzN4M8f33h3UBHO8klq2BJEWJ49vSvonRtSg1azt76ymWSCUFgTnr/8AW6UhGiHeKIIVXOewP504GMngkH1yRhaaXZmG8DDDgj070u3ryw7kDoaAKPnIwZZEwQuMBskY9Sen0qQKswBeQuByHYY/75WmoIWZQRtbOR6fgP6mlljCBm3dASe5A+vag1Z5n8XvFr6RYJpFqyrc3SEztnJEfTvyM/0NfPkksl2629uCzMcYFa/jTWbnXvFWo3LuXxM0akHqikhf0H610vw88Lq7fb7iPLfwA9qicuVCjHmkHhr4cJNAlxqRLMwz5YGRXZReD9Lhi8tbBCPXFddbWiIgyOMdKmNuhPAxXLKTkdcYJaHCTeD7GOM7LVBmuF13wrHFKWRNhB7Cvb5IQpxjNYGuaYk8TMq81MZNF+zizxgWsipsfG5OQT39q9a+EviKe1u20ed0+zTgvEWbBD8ZUZ7H/H1443WbARWE0yLygzmsrS9UkiuYJoMCa2kEi+5zXTTlc5KsOU+rgwY4PGe2f89KcAyorFjjoMjmqWmXAv8ATbS7PHmxh84z1q4Q+7hsKehA6f8A162MCs0UZUkAAY6g4X8W7/hUU25tJuA2CFjcbi2F4H6/jVyGNvJV3bBA69TgdxnpmmBSLN2dY5AwJOepFI1Pju2snm1uSJsM7TbfbJNe86LpqabpUSEYcAAgetcFpOiy/wDCfRNJatBCzySpG3YAnFeo3bxwxZY9OwrKq9TWlHqR/wBqxIwXync/3Vq3HJ5yb9hTPY1x+r69d2wha209TvkClnflR68Ct/SL1pYf34w2ecdKwbOg0ycAkdRWReSXBYgR78+g6Vo3Ey+UwQ84rib3U9ej1eFLbyjbNkOWi3Y6c9R1qUrsLjtU0iWe1lh8v/Wj06V5nqVm+lauY1BClcD8K9qsr2S4+W7hEZ6Ajo3vXOfEPSYf7GguoIwJEkJLf7JB/ritqW5lVV0epeAbwah4G0uRUICwiM5PUjg10QTbtUck8genvXF/C65DeDoLbfloidzKOOT0rtiN64B69SOOK6DjaInj8uRUiY85yCcjFDBpXCpFgKfmB/lRmSGXYcyNISS4/h/CopV2hYgBub+Iggj3pFnM6ro1vFr66ggXLxt07HvVSeHzDkgH2rpNXiVrRWAAMZ9O1YX8WKxqaHVSehmS2iS4DKOKGjSFNyrirEnDtgZ5qN5Y0ZBJnDHGAM1gdFkRp+9Xp1oa1RW+4Cakd4EkRFDruHULxTs5z1z6mlsJRGx2oY5wMioNXsVvNM8l13KM1cQkEgd60LC2E7xxsoYluRWsCKuiN3QNJj0fR4LeJQABlto6k1qMffr6inIgVcBflx2akfKjcHAbsGFdKPPepTh3bVZywYjJweP84p4UNIQXbOON1IQ6lwxVFAB+b9R6U6NsQkqhMeMnIx+vemUV7+BnsJlyDuU4IPc1yHmYBBzntXbrGFiILIA3QL0rh7tGtrySNlK4Y4OMAisKx0UH0I2JTljj3qo92ivlWBqzeItzbhdxH0NZWn2zaWzhSJAxz+8G7FZRs9zpuy2t8kp28KKmW4jcYRgee1QTyNNGV8uIZBGQtV9N04Wf8btj+8c0SSBGp6V03hqDdHJcMMkHC5HSuaLb2AH0GK7nSrVrPTo4z948n6mqpK7Mq8lyl4A49PpTXz2YDPBJpwGOe9MYrgs3AH8XpXT1OEpSERqHHl71PJJ3E+tTGQ7jmRyPRVpjOkEuMhg/IHof8Ky9V1zT9HtTcalqMNqiHOGcA/7vr/jTKbNNPlix5ZUDncxx9K4PVtetdT8Q3VnalXa1jG90PBY9vwrnvF/xYtRZy2+g7nZwwM8o7H+6P61xXwrvPP1nUVkYmRwGyT71FWPulUn7x6iknGM4I65qURo6/MaLm18w/IuD6iqjx3cIAXn8a4uY7kWjBGOcio5JUTjdVUNdueePWpY7RmyXJai4Nl/Sbm1hvYprxgsIbGW6A9BXogZduQRjsa8J+IVw9p4Sn8pijblAI+tanw2+KMEukw2Ouz7WUBUuH5BH+1/jXTRWhyVmew/fGGOcd/SkLFPl7+vrVeC+tbtFkt7mKVGXcCjA5HrxU7Mdma3sc583eMviD4gg17WbCPUZIoYbuWFFTaDtVyoGQM9AO9eaz6jc6jeb7iZ5MnJLNk1p+NpS3jPXxjH/ABMbgAf9tGrFhj2Lz1NaWFcuzy/uduenAFa3w71A2XiofNgSqUNc8x4NXPDEbSeIbcoeVbd+VRVXuFU/iPpS2mEsY5yalIB5IrJ0522oxPy8VrZry2egg47igkBST0pHYKMk1SmmcqzZ4HQUhnn/AMU9QRdDFsDzJIOK820yYpbFfaup+JDPPIkx/wBUp2Ads96422cBABxXo0PhOGvua9p4l1TQ7xLixvJYMH+E16f4c+NtxHGItZtBcgDiSMhW/EdDXjs0YlU5HWqcEjI5jOQRWy1MEeu+Ivgx4kvvFGo3wvtL8m7u5Z1DSyBsM5IyNmM8+tZ8nwU8Sk5+2aRj/rtJ/wDG6KKpF2REfgn4lJ4vtJx/10k/+Iqxpvwb8U6dqEd3Fe6RlDnBmk59f+WdFFKeqLitT1Gw8P30Eaqz25PcbmwP0rSGl3YHJg9OGP8AhRRXG6cex1psbLot1IAd8I7feP8AhUE2gXRQqkkOSMcsf8KKKz5I3FzM848T/CvxPrd9uiu9Ljt4+FRp5OT6kCPGayY/gd4nUKft+kcf9NpP/jdFFdlNJI5qmpbHwT8SlSDfaT/39k/+N1Vl+BHid23Lf6QGxkkzS/8AxuiirRnY/9k=";
        byte[] bytes = data.getBytes(StandardCharsets.UTF_8);
        System.out.println(bytes);
    }

    @Test
    public void test27() {
        String data = "您当前机型暂不支持应用操作，请选择其他业务体验";
         if (data.startsWith("您当前机型暂不支持应用操作")) {
            System.out.println(2);
        } else if (data.contains("您")) {
             System.out.println(1);
         }

        System.out.println(data.startsWith("您当前机型暂不支持应用操作"));
        System.out.println(data.startsWith("您当前机型暂不支持应用操作2"));
    }

    /**
     * StringBuilder 替换指定位置的参数
     * 结论：字符串从0开始算起，包前不包后替换
     */
    @Test
    public void test28() {
        String str = "15811317734";
        StringBuilder stringBuilder = new StringBuilder("158");
        System.out.println(stringBuilder.replace(3, 7, "****"));
        System.out.println(new StringBuilder(str).replace(3, 7, "****"));
    }

    @Test
    public void test29() {
        String seid = "21960009100000275049";
        System.out.println(seid.substring(7,8));
        System.out.println(seid.substring(8,10));
        System.out.println(seid.substring(5,7));

    }


//    public static void main(String[] args) {
//        String privateKey = "ECA65A95757D3C97ACBBBD4034DFE8B0EEB9819A9F3A77EA0CB9DB870C55E38E";
//        String enc
//        String dom = "00000000000000000000000000000000";
//        EcCardInfo ecCardInfo = EcDecryUtil.decryptEcData(privateKey, enc, dom);
//        System.out.println("" + JSONObject.toJSONString(ecCardInfo));
//    }


    @Before
    public void before() {
        System.out.println("before");
    }

    @After
    public void after() {
        System.out.println("after");
    }

}
